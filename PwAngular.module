<?php

/**
 * ProcessWire Load Angular and useful libraries
 *
 * 
 * See README file for further links regarding module development.
 * 
 * 
 * http://processwire.com
 *
 */

class PwAngular extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module'ss title, typically a little more descriptive than the class name
			'title' => 'PW and AngularJS', 

			// version number 
			'version' => 1.45, 

			// summary is brief description of what this module is
			'summary' => 'a clean way to use angularjs + API to use PW in javascript',
			
			// Optional URL to more information about the module
			'href' => 'http://processwire.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
		
			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o', 
			);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {


		// add a hook after each page is rendered and modify the output
		$this->addHookAfter('Page::render', $this, 'addAngular'); 			// Automatically loads Angular
		$this->addHook('Page::getPage', $this, 'getPage');
		$this->addHook('Page::getChildren', $this, 'getChildren');
		$this->addHook('Page::createPage', $this, 'createPage');
        $this->addHook('Page::getUser', $this, 'getUser');
        $this->addHook('Page::registerUser', $this, 'registerUser');
        $this->addHook('Page::loginUser', $this, 'loginUser');
        $this->addHook('ProcessPageView::pageNotFound', $this, 'webService');
        // $this->addHookBefore('Page::render', $this, 'webService');
        

		// $this->config->scripts->add($config->urls->templates . "js/pwservice.js");
	}



     /**
      * $http.post('http://ip/web-service/', {action: 'getPage', msg:'hello word!'})
      * @param  [type] $event [description]
      * @return [type]        [description]
      */
	public function webService($event) {

		// Check if asking for a web service
        $url = $event->arguments('url');
        if ($url != '/web-service/') return; //Let pageNotFound() handle it
		header($_SERVER['SERVER_PROTOCOL'] . ' 200 OK', true, 200);

		// Get post Data
		$request = file_get_contents('php://input');
		$getPost = json_decode($request,true);
		$service = $getPost['action'];
		$d = $getPost['data'];

		switch ($service) {

		    // case 'registerUser': registerUser( $d["name"], $d["email"], $d["email2"], $d["password"], $d["password2"] ); break;
		    // // case 'emailAdmin': sendEmail( "manol@indinet.es", "manol@indinet.es", $d["subject"], $d["message"] ); break;
		    // // case 'sendEmail': sendEmail( $d["from"], $d["to"], $d["subject"], $d["message"] ); break;
	    	// default: echo "el servicio no existe";

		    // $http.post('http://ip/web-service/', {action: 'getPage', pageId: 1046 })
		    case "getPage":									
				$pageId = $getPost['pageId'];
				$event->return =$this->get_Page($pageId);
		        break;	

		    // $http.post('http://ip/web-service/', {action: 'getChildren', pageId: 1046 })    
		    case "getChildren":								
				$pageId = $getPost['pageId'];
				$event->return =$this->get_Children($pageId);
		        break;	

		    // $http.post('http://ip/web-service/', {action: 'find', selector: 'template=directivo,parent=1077' })    
		    case "find":								
				$selector = $getPost['selector'];
				$event->return =$this->pages_find($selector);
		        break;	

		    // $http.post('http://ip/web-service/', {action: 'numChildren'})    
		    case "numChildren":	
		    	$pageId = $getPost['pageId'];					
				$event->return = wire('pages')->get($pageId)->numChildren();
		        break;		

		}

	}



	/**
	 * Crea un nuevo usuario en PW
	 */
	protected function registerUser($email2, $name, $email, $password, $password2 ){

echo "ha llegado";
return;
		/**
		 * Check for spam and last 2 lines to the code
		 */
		if (trim($email2) != '') return 'spam';
		// <input type="text" name="email2" id="email2">
		// <style type="text/css">#email2 { display: none; }</style>		

		// el usuario ya existe
		if(wire('users')->get("email=$email")->id || wire('users')->get("name=$name")->id) { 
			return "El usuario ya existe"; 
		}	

		// las constraseña no coinciden
		if($password!=$password2)
            return '<div class="alert alert-danger"><i class="fa fa-frown-o"></i> <strong>Las contraseñas</strong> no coinciden</div>';
		// 
		$pass = $password;
		$u = new User();

		// $u->$first_name = $sanitizer->text($input->post->first_name);
		// $u->$last_name = $sanitizer->text($input->post->last_name);
		$u->name= wire('sanitizer')->username($name); 
		$u->email = wire('sanitizer')->email($email);
		$u->pass = $pass;
		$u->addRole("guest");
		// $u->addRole("registrado");
		$u->language = wire('languages')->get("default");
		$u->save();
		return 'usuario '.$u->name.' creado';


	}

	/**
	 * 	
	 */
	
	protected function get_Page($pageId) {
	

		$pagina = wire('pages')->get($pageId);

		$array = array(); 

        // fields to be avoided
        // $avoid = array("FieldtypeFieldsetOpen", "FieldtypeFieldsetClose","FieldtypeFieldsetTabOpen","FieldtypeFieldsetTabClose", "FieldtypeCropImage");

		$array['id'] = $pagina->id;
		
		foreach($pagina->fields as $field) {
		
			if( htmlspecialchars($pagina->get($field->name)) )	// si existe continua
// echo ($field->type ." => ". $field->name . "\n") ;
			switch ($field->type) {
			    case "FieldtypePage":			// page
					$buscar = htmlspecialchars($pagina->get($field->name));
					$paginas = $pages->get($buscar); 
					$array[$field->name] = $paginas->title;
				    break;
			    case "FieldtypeCropImage":		// crop image
			    case "FieldtypeFile":			// File type
					$file = array();
					$file = $pagina->get($field->name)->getArray();
					$array[$field->name] = array();
					foreach ($pagina->get($field->name) as $key => $value) {
						array_push($array[$field->name], array("file"  => $key, "description" => $value->description) );
					}
				    break;				    
			    case "FieldtypePageTable":		// Page Table
					// table elements ids
					$elements = array();
					$elements = $pagina->get($field->name)->getValues();

					// get each page element ot table
					$array[$field->name] = array();
					foreach ($elements as $element) {
			    		array_push($array[$field->name], $this->getPageFields($element) );
					}
				    break;
				case "FieldtypeTextarea":			// if textarea do not strip html tags
				case "FieldtypeTextareaLanguage":
					$array[$field->name] = $pagina->get($field->name);
					break;
					
			    default:
					$array[$field->name] = htmlspecialchars($pagina->get($field->name));	
			}

		}

		return json_encode($array);
	}



	/**
	 * Get fields and values from a single page
	 * @param  [type] $pagina [description]
	 * @return [type]         [description]
	 */
	protected function getPageFields($pagina) {

		$array = array();
		$array['id'] = $pagina->id;
		foreach($pagina->fields as $field) {

			switch ($field->type) {
			    case "FieldtypePage":			// page
					$buscar = htmlspecialchars($pagina->get($field->name));
					$paginas = $pages->get($buscar); 
					$array[$field->name] = $paginas->title;
				    break;
			    case "FieldtypeCropImage":		// crop image
			    case "FieldtypeFile":			// File type
					$file = array();
					$file = $pagina->get($field->name)->getArray();
					$array[$field->name] = array();
					foreach ($pagina->get($field->name) as $key => $value) {
						array_push($array[$field->name], array("file"  => $key, "description" => $value->description) );
					}
				    break;		
				case "FieldtypeTextarea":			// if textarea do not strip html tags
				case "FieldtypeTextareaLanguage":
					$array[$field->name] = $pagina->get($field->name);
					break;
					
			    default:
					$array[$field->name] = htmlspecialchars($pagina->get($field->name));

			}//switch

		} //for

		return $array;
	}



	/**
	 * =======================================================================================
	 * REPASAR
	 * =======================================================================================
	 */


	/**
	 * [getModuleConfigInputfields description]
	 * @param  array  $data [description]
	 * @return [type]       [description]
	 */
    public static function getModuleConfigInputfields(array $data) {
        $inputfields = new InputfieldWrapper(); 
 
        // ask for their full name
        $field = wire('modules')->get('InputfieldTextarea');
        $field->name = 'scripts';
        $field->label = "Enter scripts";
        $field->description = '<script src="https://code.angularjs.org/1.3.2/angular-sanitize.min.js"></script>  <script src="http://cdn.jsdelivr.net/angular.ngtable/0.3.3/ng-table.js"></script> ';
        if(isset($data['scripts'])) $field->value = $data['scripts'];
        $inputfields->add($field); 
  
        // ask for their full name
        $field = wire('modules')->get('InputfieldText');
        $field->name = 'injector';
        $field->label = "Enter injector names";
        $field->description = "'ngSanitize','ngTable'";
        if(isset($data['injector'])) $field->value = $data['injector'];
        $inputfields->add($field); 
 
 
        return $inputfields; 
    }

	/**
	 * [addAngular description]
	 * @param [type] $event [description]
	 */
	public function addAngular($event) {

		$page = $event->object; 

		// don't add this to the admin pages
		if($page->template == 'admin') return;




		// 1.- add angular  
		
		// $this->config->scripts->add($this->config->urls->PwAngular . "angular-sanitize.min.js");
		// $this->config->scripts->add($this->config->urls->PwAngular . "pwservice.js");

	 	$angular = '';
	 	$angular .= '<link href="/site/modules/PwAngular/angular-toastr.min.css" rel="stylesheet" type="text/css" />';

	 	$angular .= '<script src="/site/modules/PwAngular/angular.min.js"></script>';
		$angular .= '<script src="/site/modules/PwAngular/angular-sanitize.min.js"></script>';
		$angular .= '<script src="/site/modules/PwAngular/angular-route.js"></script>';
		$angular .= '<script src="/site/modules/PwAngular/angular-resource.min.js"></script>';
		$angular .= '<script src="/site/modules/PwAngular/angular-toastr.tpls.min.js"></script>';
	    $angular .= '<script src="/site/modules/PwAngular/angular-animate.min.js"></script>';
	    $angular .= '<script src="/site/modules/PwAngular/angular-aria.min.js"></script>';
	    $angular .= '<script src="/site/modules/PwAngular/angular-material.min.js"></script>';
		$angular .= $this->scripts;  // add script form module config if any

		$angular .= "<script>var app = angular.module('myApp', ['ngRoute','ngResource','ngSanitize','ui.bootstrap','ngMaterial', 'toastr'])</script>";
		// $angular .= "<script>var app = angular.module('myApp', ['ngRoute','ngResource','ngSanitize','ui.bootstrap','ngMaterial', 'toastr',{$this->injector}])</script>";

		// $angular .= '<script src="/site/modules/PwAngular/pwservice.js"></script>';

		$angular .=	"</head>";
					

		// 2.- add ng-app="myApp" to body tag
		$body = "<html";
		$bodypos = strpos($body, "<html");
		$bodypos_end = $bodypos + strlen("<html");
		$newbody = substr_replace($body, ' ng-app="myApp" ', $bodypos_end, 0);
		$event->return = str_replace("<html", $newbody, $event->return);


		$event->return = str_replace("</head>", $angular, $event->return); 




		// 3.- add $page data to var = page (php -> javascript) 
		// $script =
		// 	"<script>".
		// 		"app.controller('especialidadesCtrl', function (\$scope) {".
		// 		  	"\$scope.children = [];".			
		// 		  	// "$scope.children = ". wire('page')->children.
		// 		  	"\$scope.children = 'hi there' ".
		// 		"});".
		// 	"</script>".
		// 	"</body>";	
		// $event->return = str_replace("</body>", $script, $event->return); 		
		// $this->config->scripts->add($this->config->urls->PwAngular . "pwservice.js");
	}


	/**
	 * [getPage description]
	 * @param  [type] $event [description]
	 * @return [type]        [description]
	 */
	public function getPage($event) {

		// A - returns children of actual page
		$pagina = $event->object; 

	    // B - returns children of page with certain ID
		if (is_int($event->arguments[0])) { $pagina->id = $event->arguments[0]; }
		

		$array = array(); 
        // fields to be avoided
        $avoid = array("FieldtypeFieldsetOpen", "FieldtypeFieldsetClose","FieldtypeFieldsetTabOpen","FieldtypeFieldsetTabClose");
		$array['id'] = $pagina->id;
		
		foreach($pagina->fields as $field) {
			if (!in_array($field->type, $avoid)) {
				// si el campo no esta vacio
				if( htmlspecialchars($pagina->get($field->name)) )
					if($field->type == "FieldtypePage"){
							$buscar = htmlspecialchars($pagina->get($field->name));
							$paginas = $pages->get($buscar); 
							$array[$field->name] = $paginas->title;
						
					}
				else {
					// if textarea do not strip html tags
					if($field->type == "FieldtypeTextarea" || $field->type == "FieldtypeTextareaLanguage" ){$array[$field->name] = $pagina->get($field->name);}
					else {$array[$field->name] = htmlspecialchars($pagina->get($field->name));}					
				}
			}
		}

		$event->return = json_encode($array);
	}
	

	/**
	 * $page->getChildren()
	 * $page->getChildren(id)
	 * $page->getChildren(selector)
	 * @param  [ |int|string] $event 
	 * @return json   Children fields and values of actual or desired page
	 */
	public function getChildren($event) {

		
	    // fields to be avoided, irrelevant in javascript
	    $avoid = array("FieldtypeFieldsetOpen", "FieldtypeFieldsetClose","FieldtypeFieldsetTabOpen","FieldtypeFieldsetTabClose");


		//	A -	$page->getChildren()	
		$pagina = $event->object; 
		$paginas = $pagina->children;	// get children

		// 	B -	$page->getChildren(1044)
		if (is_int($event->arguments[0])) { 
			$pagina->id = $event->arguments[0]; 
			$paginas =  wire("pages")->get($event->arguments[0])->children();
		}


		// 	C -	$page->getChildren('template=product')
		if (is_string($event->arguments[0])) { 
			$selector = $event->arguments[0]; 
			$paginas = wire('pages')->find($selector);
		}
		

	 
		$arr = array(); 

		// children in page
	    foreach ($paginas as $child) {
	 
			$array = array(); 
	 
	 		// each field in child
			foreach($child->fields as $field) {
				$array['id'] = $child->id;
				$array['url'] = $child->path;
				switch ($field->type) {
				    case "FieldtypePage":		// page
				        $array[$field->name] = $this->getFromArrayOfPages($field->name);
				        break;
				    case "FieldtypePageTable":	// array of pages
				        $array[$field->name] = $this->getFromArrayOfPages($child->get($field->name));
				        break;
				    case "FieldtypeTextarea":	// text area
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    case "FieldtypeTextareaLanguage":	// text area language
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    default:
				        $array[$field->name] = htmlspecialchars($child->get($field->name));
				        // $array[$field->name] = htmlentities($child->get($field->name));
				        // $array[$field->name] = htmlspecialchars($child->get($field->name), ENT_QUOTES,'ISO-8859-1' );
				}
			}
			array_push($arr, $array);	// push  child to main array
	    }

		$event->return = json_encode($arr);
	}

	/**
	 * loop through the PageArray and returns its fields
	 * @param  PageArray $paginas [description]
	 * @return [type]          [description]
	 */
	protected function getFromArrayOfPages($paginas) {
		$array = array();
		foreach($paginas->getArray() as $pagina) {
			array_push($array,  $this->getPageFields($pagina));
		}
		return ($array);
	}




	/**
	 * Creates a new page ex: $page->createPage( 1077, 'mytemplate', 'mmy Title' )
	 * @param  [type] $event (id, template, title)
	 * @return [type]        [description]
	 */
	public function createPage($event) {

		$parent = wire('pages')->get($event->arguments[0]); 	// parent id
		$template = $event->arguments[1]; 						// template
		$title = $event->arguments[2]; 							// title
		$name =	wire('sanitizer')->pageName($title, true);		// name
		$jsonData = json_decode($event->arguments[3]);			// Data

		// Create the page

	  	$p = new Page();

	  	$p->template = $template;
	  	$p->parent = $parent;
	  	$p->title = $title; 
	  	$p->name = $name;

	  	// rest of fields
		foreach ($jsonData as $key => $value) { 
		    $p->set($key, $value);
		}	  	


	  	$p->of(false); 
		$p->save();

	}
	
	public function getUser($event) {
        $array = array();
		$array['name'] = wire("user")->name;
		$array['language'] = "".wire("user")->language->title;
		$event->return = json_encode($array);
	}	

	public function loginUser($event) {
      
        $user = wire("sanitizer")->username($event->arguments[0]);
        $pass = $event->arguments[1]; 

        if(wire("session")->login($user, $pass)) {
          // login successful
			$event->return = "true";
        }
		$array['name'] = wire ("user")->name;
		$array['name'] = $event->arguments[0];
		$event->return = json_encode($array);


		   //      wire("user")->name = wire("sanitizer")->username($event->arguments[0]);
		   //      wire("user")->pass = $event->arguments[1]; 

		   //      if(wire("session")->login(wire("user")->name, wire("user")->pass)) {
		   //        // login successful
					// $event->return = "true";
		   //      }
		   //      $event->return = "false";

     }




	
	protected function get_Children($pageId) {
	

		$paginas = wire('pages')->get($pageId)->children;


        // fields to be avoided
        $avoid = array("FieldtypeFieldsetOpen", "FieldtypeFieldsetClose","FieldtypeFieldsetTabOpen","FieldtypeFieldsetTabClose");

		$array['id'] = $pagina->id;
		
		$arr = array(); 
		// children in page
	    foreach ($paginas as $child) {
	
			$array = array(); 
	 
	 		// each field in child
			foreach($child->fields as $field) { 
				$array['id'] = $child->id;
				$array['url'] = $child->path;
				switch ($field->type) {
				    case "FieldtypePage":		// page
				        $array[$field->name] = $this->getFromArrayOfPages($field->name);
				        break;
				    case "FieldtypePageTable":	// array of pages
				        $array[$field->name] = $this->getFromArrayOfPages($child->get($field->name));
				        break;
				    case "FieldtypeTextarea":	// text area
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    case "FieldtypeTextareaLanguage":	// text area language
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    default:
				        $array[$field->name] = htmlspecialchars($child->get($field->name)); 
				        // $array[$field->name] = htmlentities($child->get($field->name));
				        // $array[$field->name] = htmlspecialchars($child->get($field->name), ENT_QUOTES,'ISO-8859-1' );
				}
			}
			array_push($arr, $array);	// push  child to main array
	    }
		return json_encode($arr);
	}	


	protected function pages_find($selector) {
	

		$paginas = wire('pages')->find($selector);


        // fields to be avoided
        $avoid = array("FieldtypeFieldsetOpen", "FieldtypeFieldsetClose","FieldtypeFieldsetTabOpen","FieldtypeFieldsetTabClose");

		$array['id'] = $pagina->id;
		
		$arr = array(); 
		// children in page
	    foreach ($paginas as $child) {
	
			$array = array(); 
	 
	 		// each field in child
			foreach($child->fields as $field) { 
				$array['id'] = $child->id;
				$array['url'] = $child->path;
				switch ($field->type) {
				    case "FieldtypePage":		// page
				        $array[$field->name] = $this->getFromArrayOfPages($field->name);
				        break;
				    case "FieldtypePageTable":	// array of pages
				        $array[$field->name] = $this->getFromArrayOfPages($child->get($field->name));
				        break;
				    case "FieldtypeTextarea":	// text area
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    case "FieldtypeTextareaLanguage":	// text area language
				        $array[$field->name] = ($child->get($field->name));
				        break;
				    default:
				        $array[$field->name] = htmlspecialchars($child->get($field->name)); 
				        // $array[$field->name] = htmlentities($child->get($field->name));
				        // $array[$field->name] = htmlspecialchars($child->get($field->name), ENT_QUOTES,'ISO-8859-1' );
				}
			}
			array_push($arr, $array);	// push  child to main array
	    }
		return json_encode($arr);
	}


	
}
